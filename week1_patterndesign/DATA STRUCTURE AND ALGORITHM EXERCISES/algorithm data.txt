using System;
using System.Collections.Generic;

namespace MyCSharpApp
{
    class Product : IComparable<Product>
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public string Category { get; set; }

        public Product(int productId, string productName, string category)
        {
            ProductId = productId;
            ProductName = productName;
            Category = category;
        }

        public int CompareTo(Product? other)
        {
            if (other == null) return 1;
            return this.ProductName.CompareTo(other.ProductName);
        }

        public override string ToString()
        {
            return $"Product({ProductId}, \"{ProductName}\", \"{Category}\")";
        }
    }

    class Program
    {
        static Product? LinearSearch(List<Product> products, string targetName)
        {
            foreach (var product in products)
            {
                if (product.ProductName.Equals(targetName, StringComparison.OrdinalIgnoreCase))
                    return product;
            }
            return null;
        }

        static Product? BinarySearch(List<Product> products, string targetName)
        {
            int left = 0, right = products.Count - 1;
            while (left <= right)
            {
                int mid = (left + right) / 2;
                int comparison = products[mid].ProductName.CompareTo(targetName);
                if (comparison == 0)
                    return products[mid];
                else if (comparison < 0)
                    left = mid + 1;
                else
                    right = mid - 1;
            }
            return null;
        }

        static void Main(string[] args)
        {
            var products = new List<Product>
            {
                new Product(1, "Laptop", "Electronics"),
                new Product(2, "Mouse", "Electronics"),
                new Product(3, "Chair", "Furniture"),
                new Product(4, "Table", "Furniture"),
                new Product(5, "Headphones", "Electronics")
            };

            Console.WriteLine("---- Linear Search ----");
            var result1 = LinearSearch(products, "Chair");
            Console.WriteLine(result1 != null ? result1.ToString() : "Product not found");

            // Sort for binary search
            products.Sort();

            Console.WriteLine("---- Binary Search ----");
            var result2 = BinarySearch(products, "Chair");
            Console.WriteLine(result2 != null ? result2.ToString() : "Product not found");
        }
    }
}



Big O Notation
Big O notation is a mathematical notation used to describe the time complexity and space complexity of algorithms in terms of input size n. It helps determine the scalability and efficiency of an algorithm as data size grows.


Which Algorithm Is Better and Why?
Binary Search is more efficient for large datasets but requires:

The array to be sorted.

Random access (i.e., use of an array or similar structure).

Linear Search works for unsorted data and is simpler but slower for large datasets.

Conclusion:
For small datasets or unsorted product lists, linear search may suffice.

For large datasets where performance matters, binary search on a sorted array is significantly faster and should be preferred.

An even better production-ready option would be to use hash-based or indexed search structures (e.g., tries, B-trees, or full-text search engines) for scalability and performance.